//quick sort with time complexity

#include <stdio.h>
#include<time.h>

void partition(int a[],int left,int right){
    int pivot,temp,flag=0;
    pivot=left;
    while(flag!=1){
        while(a[pivot]<=a[right] && right!=pivot){
            right--;
        }
        if(pivot==right){
            flag=1;
        }
        else if(a[pivot]>a[right]){
            temp=a[pivot];
            a[right]=temp;
            a[pivot]=a[temp];
            pivot=temp;
        }
        if(flag!=1){
            while(a[pivot]>=a[left] && left!=pivot){
                left++;
            }
            if(pivot==left){
                flag=1;
            }
            else if(a[pivot]<a[left]){
                temp=a[pivot];
                a[left]=temp;
                a[pivot]=a[left];
                pivot=left;
            }
        }
    }
    return pivot;
}

void quicksort(int a[],int left,int right){
    int pivot;
    if(left>right){
       pivot=partition(a,left,right);
       quicksort(a,left,pivot-1);
       quicksort(a,pivot+1,right);
    }
}


int main()
{
    int n,a[100];
    float t;
    printf("enter number of elements: ");
    scanf("%d",&n);
    printf("enter elements:");
    
    for(int i=0;i<n;i++){
        scanf("%d",a[i]);
    }
    for(int i=0;i<n;i++){
        a[i]=i;
    }
    t=clock();
    quicksort(a,0,n-1);
    t=clock()-t;
    printf("best case time:%f",t);
    
    for(int i=0,j=n;i<n,j>0;i++,j--){
        a[i]=j;
    }
    t=clock();
    quicksort(a,0,n-1);
    t=clock()-t;
    printf("worst case time: %f",t);
    
    for(int i=0;i<n;i++){
        a[i]=rand();
    }
    t=clock();
    quicksort(a,0,n-1);
    t=clock()-t;
    printf("avg case time: %f",t);
    
    
    return 0;
}

